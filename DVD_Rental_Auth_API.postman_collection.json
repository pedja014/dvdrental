{
	"info": {
		"_postman_id": "dvd-rental-auth-api",
		"name": "DVD Rental API",
		"description": "Complete DVD Rental Management API with authentication, CRUD operations for Films, Categories, Payments, and Rentals, and Analytics endpoints following Django Styleguide",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "dvd-rental-auth"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('user_id', response.user.id);",
									"    pm.environment.set('username', response.user.username);",
									"    pm.environment.set('email', response.user.email);",
									"    console.log('User registered successfully:', response.user.username);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"johndoe\",\n    \"email\": \"john@example.com\",\n    \"password\": \"SecurePass123!\",\n    \"confirm_password\": \"SecurePass123!\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"register",
								""
							]
						},
						"description": "Register a new user account. The account will be created as inactive and an activation email will be sent."
					},
					"response": [
						{
							"name": "Successful Registration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"johndoe\",\n    \"email\": \"john@example.com\",\n    \"password\": \"SecurePass123!\",\n    \"confirm_password\": \"SecurePass123!\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register",
										""
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Account created successfully. Please check your email for activation link.\",\n    \"user\": {\n        \"id\": 1,\n        \"username\": \"johndoe\",\n        \"email\": \"john@example.com\",\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\",\n        \"role\": \"customer\",\n        \"is_active\": false,\n        \"date_joined\": \"2024-01-01T12:00:00Z\"\n    }\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"johndoe\",\n    \"email\": \"invalid-email\",\n    \"password\": \"weak\",\n    \"confirm_password\": \"different\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"type\": \"ValidationError\",\n        \"message\": \"Validation failed\",\n        \"code\": \"validation_error\",\n        \"status_code\": 400,\n        \"fields\": {\n            \"email\": [\"Enter a valid email address.\"],\n            \"password\": [\"Password must be at least 8 characters long.\", \"Password must contain at least one uppercase letter.\", \"Password must contain at least one number.\", \"Password must contain at least one special character.\"],\n            \"confirm_password\": [\"Password fields didn't match.\"]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Activate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('access_token', response.access);",
									"    pm.environment.set('refresh_token', response.refresh);",
									"    console.log('User activated successfully:', response.user.username);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{activation_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/activate/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"activate",
								""
							]
						},
						"description": "Activate user account using token from activation email. Returns JWT tokens for immediate login."
					},
					"response": [
						{
							"name": "Successful Activation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/activate/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"activate",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Account activated successfully!\",\n    \"access\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"refresh\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"user\": {\n        \"id\": 1,\n        \"username\": \"johndoe\",\n        \"email\": \"john@example.com\",\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\",\n        \"role\": \"customer\",\n        \"is_active\": true,\n        \"date_joined\": \"2024-01-01T12:00:00Z\"\n    }\n}"
						},
						{
							"name": "Invalid Token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"invalid-token\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/activate/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"activate",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"type\": \"InvalidTokenError\",\n        \"message\": \"Invalid activation token.\",\n        \"code\": \"invalid_token\",\n        \"status_code\": 400\n    }\n}"
						}
					]
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('access_token', response.access);",
									"    pm.environment.set('refresh_token', response.refresh);",
									"    console.log('Login successful for:', response.user.username);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"SecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login",
								""
							]
						},
						"description": "Login with username/email and password. Returns JWT access and refresh tokens."
					},
					"response": [
						{
							"name": "Successful Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"johndoe\",\n    \"password\": \"SecurePass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"access\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"refresh\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"user\": {\n        \"id\": 1,\n        \"username\": \"johndoe\",\n        \"email\": \"john@example.com\",\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\",\n        \"role\": \"customer\",\n        \"is_active\": true,\n        \"date_joined\": \"2024-01-01T12:00:00Z\"\n    }\n}"
						},
						{
							"name": "Invalid Credentials",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"johndoe\",\n    \"password\": \"wrongpassword\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"type\": \"InvalidCredentialsError\",\n        \"message\": \"Invalid username or password.\",\n        \"code\": \"invalid_credentials\",\n        \"status_code\": 400\n    }\n}"
						},
						{
							"name": "Account Not Activated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"inactiveuser\",\n    \"password\": \"SecurePass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"type\": \"AccountNotActivatedError\",\n        \"message\": \"Account is not activated. Please check your email for activation link.\",\n        \"code\": \"account_not_activated\",\n        \"status_code\": 400\n    }\n}"
						}
					]
				},
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/me/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"me",
								""
							]
						},
						"description": "Get current authenticated user's profile information. Requires valid JWT token."
					},
					"response": [
						{
							"name": "User Profile",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{base_url}}/api/auth/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"me",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"username\": \"johndoe\",\n    \"email\": \"john@example.com\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"role\": \"customer\",\n    \"is_active\": true,\n    \"date_joined\": \"2024-01-01T12:00:00Z\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"me",
										""
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
						}
					]
				},
				{
					"name": "Request Password Reset",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/password-reset/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"password-reset",
								""
							]
						},
						"description": "Request password reset email. Sends reset link to user's email address."
					},
					"response": [
						{
							"name": "Reset Email Sent",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"john@example.com\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/password-reset/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"password-reset",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"If an account with this email exists, a password reset link has been sent.\"\n}"
						}
					]
				},
				{
					"name": "Confirm Password Reset",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{reset_token}}\",\n    \"new_password\": \"NewSecurePass123!\",\n    \"confirm_password\": \"NewSecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/password-reset/confirm/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"password-reset",
								"confirm",
								""
							]
						},
						"description": "Confirm password reset using token from email. Sets new password for user account."
					},
					"response": [
						{
							"name": "Password Reset Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"new_password\": \"NewSecurePass123!\",\n    \"confirm_password\": \"NewSecurePass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/password-reset/confirm/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"password-reset",
										"confirm",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Password reset successfully! You can now login with your new password.\"\n}"
						},
						{
							"name": "Invalid Token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"invalid-token\",\n    \"new_password\": \"NewSecurePass123!\",\n    \"confirm_password\": \"NewSecurePass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/password-reset/confirm/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"password-reset",
										"confirm",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"type\": \"InvalidTokenError\",\n        \"message\": \"Invalid password reset token.\",\n        \"code\": \"invalid_token\",\n        \"status_code\": 400\n    }\n}"
						}
					]
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('access_token', response.access);",
									"    console.log('Token refreshed successfully');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/token/refresh/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"token",
								"refresh",
								""
							]
						},
						"description": "Refresh JWT access token using refresh token. Returns new access token."
					},
					"response": [
						{
							"name": "Token Refreshed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/token/refresh/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"token",
										"refresh",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"access\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\"\n}"
						}
					]
				}
			],
			"description": "Complete authentication flow including registration, activation, login, and password reset."
		},
		{
			"name": "Test Scenarios",
			"item": [
				{
					"name": "Complete Registration Flow",
					"item": [
						{
							"name": "1. Register User",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\",\n    \"password\": \"TestPass123!\",\n    \"confirm_password\": \"TestPass123!\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register",
										""
									]
								}
							}
						},
						{
							"name": "2. Try Login (Should Fail - Account Inactive)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"TestPass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login",
										""
									]
								}
							}
						},
						{
							"name": "3. Activate Account (Use token from email)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{activation_token}}\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/activate/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"activate",
										""
									]
								}
							}
						},
						{
							"name": "4. Login (Should Succeed)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"TestPass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login",
										""
									]
								}
							}
						},
						{
							"name": "5. Get User Profile",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/auth/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"me",
										""
									]
								}
							}
						}
					],
					"description": "Test the complete user registration and activation flow"
				},
				{
					"name": "Password Reset Flow",
					"item": [
						{
							"name": "1. Request Password Reset",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{email}}\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/password-reset/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"password-reset",
										""
									]
								}
							}
						},
						{
							"name": "2. Confirm Password Reset",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{reset_token}}\",\n    \"new_password\": \"NewTestPass123!\",\n    \"confirm_password\": \"NewTestPass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/password-reset/confirm/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"password-reset",
										"confirm",
										""
									]
								}
							}
						},
						{
							"name": "3. Login with New Password",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"NewTestPass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login",
										""
									]
								}
							}
						}
					],
					"description": "Test the complete password reset flow"
				}
			],
			"description": "Pre-configured test scenarios for common authentication flows"
		},
		{
			"name": "Films",
			"item": [
				{
					"name": "List Films",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.results && response.results.length > 0) {",
									"        pm.environment.set('film_id', response.results[0].film_id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/films/?page=1&page_size=20&search={{search_term}}",
							"host": ["{{base_url}}"],
							"path": ["api", "films", ""],
							"query": [
								{"key": "page", "value": "1", "description": "Page number"},
								{"key": "page_size", "value": "20", "description": "Items per page"},
								{"key": "search", "value": "{{search_term}}", "description": "Search term (optional)", "disabled": true}
							]
						},
						"description": "List all films with pagination. Supports search by title/description. Authenticated users can read, staff/admin can create."
					}
				},
				{
					"name": "Get Film Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/films/{{film_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "films", "{{film_id}}", ""]
						},
						"description": "Get detailed information about a specific film. Requires authentication."
					}
				},
				{
					"name": "Create Film",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('film_id', response.film_id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Great Adventure\",\n    \"description\": \"An epic tale of adventure and discovery\",\n    \"release_year\": 2024,\n    \"language_id\": 1,\n    \"rental_duration\": 7,\n    \"rental_rate\": \"4.99\",\n    \"length\": 120,\n    \"replacement_cost\": \"19.99\",\n    \"rating\": \"PG\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/films/",
							"host": ["{{base_url}}"],
							"path": ["api", "films", ""]
						},
						"description": "Create a new film. Requires staff/admin role."
					}
				},
				{
					"name": "Update Film",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Great Adventure (Updated)\",\n    \"description\": \"Updated description\",\n    \"rental_rate\": \"5.99\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/films/{{film_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "films", "{{film_id}}", ""]
						},
						"description": "Update an existing film. Requires staff/admin role."
					}
				},
				{
					"name": "Delete Film",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/films/{{film_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "films", "{{film_id}}", ""]
						},
						"description": "Delete a film. Requires staff/admin role."
					}
				}
			],
			"description": "Film CRUD operations. Customers have read-only access, staff/admin have full access."
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "List Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.results && response.results.length > 0) {",
									"        pm.environment.set('category_id', response.results[0].category_id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/categories/?page=1&page_size=20",
							"host": ["{{base_url}}"],
							"path": ["api", "categories", ""],
							"query": [
								{"key": "page", "value": "1"},
								{"key": "page_size", "value": "20"}
							]
						},
						"description": "List all categories with pagination. Authenticated users can read, staff/admin can create."
					}
				},
				{
					"name": "Get Category Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/categories/{{category_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "categories", "{{category_id}}", ""]
						},
						"description": "Get detailed information about a specific category."
					}
				},
				{
					"name": "Create Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('category_id', response.category_id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Sci-Fi\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/categories/",
							"host": ["{{base_url}}"],
							"path": ["api", "categories", ""]
						},
						"description": "Create a new category. Requires staff/admin role."
					}
				},
				{
					"name": "Update Category",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Science Fiction\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/categories/{{category_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "categories", "{{category_id}}", ""]
						},
						"description": "Update a category. Requires staff/admin role."
					}
				},
				{
					"name": "Delete Category",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/categories/{{category_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "categories", "{{category_id}}", ""]
						},
						"description": "Delete a category. Requires staff/admin role."
					}
				}
			],
			"description": "Category CRUD operations. Customers have read-only access, staff/admin have full access."
		},
		{
			"name": "Payments",
			"item": [
				{
					"name": "List Payments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.results && response.results.length > 0) {",
									"        pm.environment.set('payment_id', response.results[0].payment_id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/payments/?page=1&page_size=20&customer_id={{customer_id}}&staff_id={{staff_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "payments", ""],
							"query": [
								{"key": "page", "value": "1"},
								{"key": "page_size", "value": "20"},
								{"key": "customer_id", "value": "{{customer_id}}", "disabled": true},
								{"key": "staff_id", "value": "{{staff_id}}", "disabled": true}
							]
						},
						"description": "List payments with pagination and optional filtering. Staff/admin only."
					}
				},
				{
					"name": "Get Payment Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/payments/{{payment_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "payments", "{{payment_id}}", ""]
						},
						"description": "Get detailed information about a specific payment. Staff/admin only."
					}
				},
				{
					"name": "Create Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('payment_id', response.payment_id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer_id\": 1,\n    \"staff_id\": 1,\n    \"rental_id\": null,\n    \"amount\": \"9.99\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/payments/",
							"host": ["{{base_url}}"],
							"path": ["api", "payments", ""]
						},
						"description": "Create a new payment. Requires staff/admin role."
					}
				},
				{
					"name": "Update Payment",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": \"14.99\",\n    \"rental_id\": 1\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/payments/{{payment_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "payments", "{{payment_id}}", ""]
						},
						"description": "Update a payment. Requires staff/admin role."
					}
				},
				{
					"name": "Delete Payment",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/payments/{{payment_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "payments", "{{payment_id}}", ""]
						},
						"description": "Delete a payment. Requires staff/admin role."
					}
				}
			],
			"description": "Payment CRUD operations. Staff/admin only."
		},
		{
			"name": "Rentals",
			"item": [
				{
					"name": "List Rentals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.results && response.results.length > 0) {",
									"        pm.environment.set('rental_id', response.results[0].rental_id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/rentals/?page=1&page_size=20&customer_id={{customer_id}}&staff_id={{staff_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "rentals", ""],
							"query": [
								{"key": "page", "value": "1"},
								{"key": "page_size", "value": "20"},
								{"key": "customer_id", "value": "{{customer_id}}", "disabled": true},
								{"key": "staff_id", "value": "{{staff_id}}", "disabled": true}
							]
						},
						"description": "List rentals with pagination and optional filtering. Staff/admin only."
					}
				},
				{
					"name": "Get Rental Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/rentals/{{rental_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "rentals", "{{rental_id}}", ""]
						},
						"description": "Get detailed information about a specific rental. Staff/admin only."
					}
				},
				{
					"name": "Create Rental",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('rental_id', response.rental_id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"inventory_id\": 1,\n    \"customer_id\": 1,\n    \"staff_id\": 1,\n    \"rental_date\": \"2024-01-01T10:00:00Z\",\n    \"return_date\": null\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/rentals/",
							"host": ["{{base_url}}"],
							"path": ["api", "rentals", ""]
						},
						"description": "Create a new rental. Requires staff/admin role."
					}
				},
				{
					"name": "Update Rental",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"return_date\": \"2024-01-08T10:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/rentals/{{rental_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "rentals", "{{rental_id}}", ""]
						},
						"description": "Update a rental (e.g., set return_date). Requires staff/admin role."
					}
				},
				{
					"name": "Delete Rental",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/rentals/{{rental_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "rentals", "{{rental_id}}", ""]
						},
						"description": "Delete a rental. Requires staff/admin role."
					}
				}
			],
			"description": "Rental CRUD operations. Staff/admin only."
		},
		{
			"name": "Analytics",
			"item": [
				{
					"name": "Get Most Profitable Categories",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/analytics/most-profitable-categories/?year={{year}}",
							"host": ["{{base_url}}"],
							"path": ["api", "analytics", "most-profitable-categories", ""],
							"query": [
								{"key": "year", "value": "{{year}}", "description": "Filter by year (optional). If not provided, returns all years grouped by year.", "disabled": true}
							]
						},
						"description": "Get most profitable movie categories grouped by year. Year parameter is optional - if omitted, returns all years. Staff/admin only."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/analytics/most-profitable-categories/",
									"host": ["{{base_url}}"],
									"path": ["api", "analytics", "most-profitable-categories", ""]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"count\": 2,\n    \"results\": [\n        {\n            \"category_id\": 1,\n            \"category_name\": \"Action\",\n            \"year\": 2005,\n            \"total_revenue\": \"5000.00\",\n            \"rental_count\": 250,\n            \"film_count\": 50\n        },\n        {\n            \"category_id\": 2,\n            \"category_name\": \"Comedy\",\n            \"year\": 2005,\n            \"total_revenue\": \"4500.00\",\n            \"rental_count\": 225,\n            \"film_count\": 45\n        }\n    ]\n}"
						},
						{
							"name": "With Year Filter",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/analytics/most-profitable-categories/?year=2005",
									"host": ["{{base_url}}"],
									"path": ["api", "analytics", "most-profitable-categories", ""],
									"query": [
										{"key": "year", "value": "2005"}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"count\": 2,\n    \"results\": [\n        {\n            \"category_id\": 1,\n            \"category_name\": \"Action\",\n            \"year\": 2005,\n            \"total_revenue\": \"5000.00\",\n            \"rental_count\": 250,\n            \"film_count\": 50\n        }\n    ]\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/analytics/most-profitable-categories/",
									"host": ["{{base_url}}"],
									"path": ["api", "analytics", "most-profitable-categories", ""]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
						}
					]
				},
				{
					"name": "Get Most Profitable Films",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/analytics/most-profitable-films/?year={{year}}&limit={{limit}}",
							"host": ["{{base_url}}"],
							"path": ["api", "analytics", "most-profitable-films", ""],
							"query": [
								{"key": "year", "value": "{{year}}", "description": "Filter by year (optional). If not provided, returns all years grouped by year.", "disabled": true},
								{"key": "limit", "value": "{{limit}}", "description": "Maximum number of results (default 100, max 1000)", "disabled": true}
							]
						},
						"description": "Get most profitable movies grouped by year. Year and limit parameters are optional. Staff/admin only."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/analytics/most-profitable-films/?limit=10",
									"host": ["{{base_url}}"],
									"path": ["api", "analytics", "most-profitable-films", ""],
									"query": [
										{"key": "limit", "value": "10"}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"count\": 10,\n    \"results\": [\n        {\n            \"film_id\": 1,\n            \"title\": \"ACADEMY DINOSAUR\",\n            \"year\": 2005,\n            \"total_revenue\": \"1500.00\",\n            \"rental_count\": 75,\n            \"category_names\": [\"Documentary\", \"Action\"]\n        },\n        {\n            \"film_id\": 2,\n            \"title\": \"ACE GOLDFINGER\",\n            \"year\": 2005,\n            \"total_revenue\": \"1450.00\",\n            \"rental_count\": 72,\n            \"category_names\": [\"Action\", \"Thriller\"]\n        }\n    ]\n}"
						},
						{
							"name": "With Year and Limit",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/analytics/most-profitable-films/?year=2005&limit=20",
									"host": ["{{base_url}}"],
									"path": ["api", "analytics", "most-profitable-films", ""],
									"query": [
										{"key": "year", "value": "2005"},
										{"key": "limit", "value": "20"}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"count\": 20,\n    \"results\": [\n        {\n            \"film_id\": 1,\n            \"title\": \"ACADEMY DINOSAUR\",\n            \"year\": 2005,\n            \"total_revenue\": \"1500.00\",\n            \"rental_count\": 75,\n            \"category_names\": [\"Documentary\", \"Action\"]\n        }\n    ]\n}"
						},
						{
							"name": "Invalid Limit",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/analytics/most-profitable-films/?limit=2000",
									"host": ["{{base_url}}"],
									"path": ["api", "analytics", "most-profitable-films", ""],
									"query": [
										{"key": "limit", "value": "2000"}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"type\": \"BusinessLogicError\",\n        \"message\": \"Limit must be between 1 and 1000\",\n        \"code\": \"business_logic_error\",\n        \"status_code\": 400\n    }\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/analytics/most-profitable-films/",
									"host": ["{{base_url}}"],
									"path": ["api", "analytics", "most-profitable-films", ""]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
						}
					]
				}
			],
			"description": "Analytics endpoints for profit analysis. Staff/admin only. Uses stored procedures to analyze most profitable categories and films by year."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default values if not already set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8000');",
					"}",
					"",
					"if (!pm.environment.get('username')) {",
					"    pm.environment.set('username', 'johndoe');",
					"}",
					"",
					"if (!pm.environment.get('email')) {",
					"    pm.environment.set('email', 'john@example.com');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}
